//
//  MainInteractor.swift
//  CryptoTrackerV2
//
//  Created by Алексей Однолько on 24.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic {
    func fetchListCoins()
    func updateCoins()
    func featchSearchedCoins(request: Main.ShowSearchedCoinList.Request)
}

protocol MainDataStore {
    var coins: [Coin] { get }
    var searchedCoins: [Coin] { get }
    var isSearching: Bool { get }
}

class MainInteractor: MainBusinessLogic, MainDataStore {
    
    var presenter: MainPresentationLogic?
    var coins: [Coin] = []
    var searchedCoins: [Coin] = []
    private var searchText: String = ""
    private var isUpdating: Bool = false
    var isSearching: Bool = false
    
    
    //MARK: request NetWork for Coins
    private func requestNetWork(clouser: @escaping () -> ()) {
        NetworkManager.shared.fetchData { [unowned self] coins in
            CashData.shared.setCashCoins(for: coins)
            self.coins = coins
            clouser()
        }
    }
    
    // MARK: Update coins data from RefrashControl
    func updateCoins() {
        requestNetWork { [unowned self] in
            isUpdating = true
            pushPresent()
        }
    }
    
    // MARK: Fetch coins list then ViewDidLoad
    func fetchListCoins() {
        if CashData.shared.cashCoinsIsEmpty() {
            requestNetWork { [unowned self] in
                pushPresent()
            }
        } else if coins.isEmpty {
            coins = CashData.shared.getCashCoins()
            pushPresent()
        }
    }
    
    // MARK: Featch coins for search
    func featchSearchedCoins(request: Main.ShowSearchedCoinList.Request) {
        searchText = request.searchText
        isSearching = !searchText.isEmpty
        searchCoins(by: searchText)
    }
}

extension MainInteractor {
    
    //MARK: Search func
    private func searchCoins(by searchText: String) {
        searchedCoins = coins.filter { coin in
            coin.name.lowercased().contains(searchText.lowercased())
        }
        pushPresent()
    }
    
    //MARK: Transmits coins to presenter
    private func pushPresent() {
        if isSearching {
            isUpdating = false
            let response = Main.ShowSearchedCoinList.Response(coins: searchedCoins)
            presenter?.presentSearchedCoinsList(response: response)
        }else if isUpdating {
            isUpdating = false
            let responce = Main.ShowUpdateCoinList.Response(coins: coins)
            presenter?.presentUpdatedCoinsList(response: responce)
        }else {
            let response = Main.ShowCoinsList.Response(coins: coins)
            presenter?.presentCoinsList(response: response)
        }
    }
}
