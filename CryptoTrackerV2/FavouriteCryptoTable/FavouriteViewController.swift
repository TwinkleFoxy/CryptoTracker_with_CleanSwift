//
//  FavouriteViewController.swift
//  CryptoTrackerV2
//
//  Created by Алексей Однолько on 24.06.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavouriteDisplayLogic: AnyObject {
    func displayFavouritCoins(viewModel: Favourite.ShowFavouriteCoinsList.ViewModel)
    func displayUpdatedFavouriteCoins(viewModel: Favourite.ShowUpdateFavouriteCoinList.ViewModel)
    func displaySearchedFavouritCoins(viewModel: Favourite.ShowSearchedFavouriteCoinsList.ViewModel)
}

class FavouriteViewController: UIViewController, FavouriteDisplayLogic {
    
    var interactor: FavouriteBusinessLogic?
    var router: (NSObjectProtocol & FavouriteRoutingLogic & FavouriteDataPassing)?
    var viewModelCell: [CellViewModelProtocol] = []
    
    @IBOutlet weak var tableView: UITableView!
    
    let refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        refreshControl.tintColor = .systemPink
        return refreshControl
    }()
    
    let searchController: UISearchController = {
       let searchController = UISearchController()
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.definesPresentationContext = true
        return searchController
    }()
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        DispatchQueue.main.async { [unowned self] in
            getFavouriteListCoins()
        }
    }
    
    //MARK: Setup UI
    func setupUI() {
        tableView.refreshControl = refreshControl
        searchController.searchResultsUpdater = self
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        refreshControl.beginRefreshing()
        refreshControl.addTarget(self, action: #selector(refreshDataControl), for: .valueChanged)
    }
    
    //MARK: Refrash Control Func
    @objc func refreshDataControl() {
        interactor?.updateFavouriteCoins()
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Get favourite list coins
    func getFavouriteListCoins() {
        interactor?.featchFavouriteCoins()
    }
    
    // MARK: Display favourite list coins
    func displayFavouritCoins(viewModel: Favourite.ShowFavouriteCoinsList.ViewModel) {
        viewModelCell = viewModel.favouritCoinCellViewModel
        DispatchQueue.main.async { [unowned self] in
            tableView.reloadData()
            refreshControl.endRefreshing()
        }
    }
    
    //MARK: Display updated favourit coins
    func displayUpdatedFavouriteCoins(viewModel: Favourite.ShowUpdateFavouriteCoinList.ViewModel) {
        viewModelCell = viewModel.favouritCoinCellViewModel
        DispatchQueue.main.async { [unowned self] in
            tableView.reloadData()
            refreshControl.endRefreshing()
        }
    }
    
    
    //MARK: Display searched favourit coins
    func displaySearchedFavouritCoins(viewModel: Favourite.ShowSearchedFavouriteCoinsList.ViewModel) {
        viewModelCell = viewModel.favouriteSearchedCoinCellViewModel
        DispatchQueue.main.async { [unowned self] in
            tableView.reloadData()
            refreshControl.endRefreshing()
        }
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = FavouriteInteractor()
        let presenter = FavouritePresenter()
        let router = FavouriteRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

// MARK: UITableViewDelegate, UITableViewDataSource
extension FavouriteViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        viewModelCell.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "cellMainController") as? CryptoTableViewCell else { return UITableViewCell()}
        cell.cryptoTableViewCellConfigurator.configure(viewCellController: cell, viewModelCell: viewModelCell[indexPath.row])
        cell.setupCell()
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

//MARK: UISearchResultsUpdating
extension FavouriteViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        guard let searchText = searchController.searchBar.text else { return }
        let request = Favourite.ShowSearchedFavouriteCoinsList.Request(searchText: searchText)
        interactor?.featchFavouritSearchedCoins(request: request)
    }
}
