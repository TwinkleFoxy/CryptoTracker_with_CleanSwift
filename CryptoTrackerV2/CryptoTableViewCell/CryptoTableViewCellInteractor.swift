//
//  CryptoTableViewCellInteractor.swift
//  CryptoTrackerV2
//
//  Created by Алексей Однолько on 23.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CryptoTableViewCellBusinessLogic {
    func provideCoinForCell(request: CryptoTableViewCellModel.Something.Request)
}

protocol CryptoTableViewCellDataStore {
    init(viewModelCell: CellViewModelProtocol)
    var viewModelCell: CellViewModelProtocol { get }
}

class CryptoTableViewCellInteractor: CryptoTableViewCellBusinessLogic, CryptoTableViewCellDataStore {
    
    var presenter: CryptoTableViewCellPresentationLogic?
    var worker: CryptoTableViewCellWorker?
    let viewModelCell: CellViewModelProtocol
    
    required init(viewModelCell: CellViewModelProtocol){
        self.viewModelCell = viewModelCell
    }
    
    // MARK: Provide coin for cell
    func provideCoinForCell(request: CryptoTableViewCellModel.Something.Request) {
        worker = CryptoTableViewCellWorker()
        let imageData = worker?.fetchImageData(imageUrl: viewModelCell.imageCoin)
        
        let response = CryptoTableViewCellModel.Something.Response(imageCoinData: imageData,
                                                                   nameCoin: viewModelCell.nameCoin,
                                                                   priceChangePercentage24h: viewModelCell.priceChangePercentage24h,
                                                                   priceCoin: viewModelCell.priceCoin)
        presenter?.presentCoinForCell(response: response)
    }
}
